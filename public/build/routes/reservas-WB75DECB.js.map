{
  "version": 3,
  "sources": ["empty-module:../services/reservaService.server", "../../../src/routes/reservas.jsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src\\\\\\\\routes\\\\\\\\reservas.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src\\\\routes\\\\reservas.jsx\");\n  import.meta.hot.lastModified = \"1698189154809.1704\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData, useLoaderData } from '@remix-run/react';\nimport Nav from '../components/Nav';\nimport { authenticator } from '../secure/authentication.server';\nimport { json, redirect } from '@remix-run/node';\nimport { todosAmbientes, verificarDisponibilidadeAmbiente } from '../services/ambienteService.server';\nimport { excluirReserva, novaReserva, todasReservas } from '../services/reservaService.server';\nexport const meta = () => {\n  return [{\n    title: 'Reservar ambiente - Pass'\n  }, {\n    name: 'description',\n    content: 'Pass!'\n  }];\n};\n\n// A\u00E7\u00E3o do formul\u00E1rio de nova reserva\nexport async function action({\n  request\n}) {\n  let form = await request.formData();\n  let _action = form.get('_action');\n  if (_action === 'nova_reserva') {\n    let id_espaco = form.get('id_espaco');\n    let id_morador = form.get('id_morador');\n    let data = new Date(form.get('data'));\n    let existeReserva = await verificarDisponibilidadeAmbiente(id_espaco, data);\n    if (existeReserva) {\n      return json({\n        mensagem: 'A data selecionada n\u00E3o est\u00E1 dispon\u00EDvel para reserva.'\n      });\n    }\n    await novaReserva({\n      id_espaco,\n      id_morador,\n      data\n    });\n    return redirect('/reservas');\n  }\n  if (_action === 'cancelar_reserva') {\n    let id_reserva = form.get('id_reserva');\n    await excluirReserva(id_reserva);\n    return redirect('/reservas');\n  }\n}\nexport async function loader({\n  request\n}) {\n  let usuario = await authenticator.isAuthenticated(request, {\n    failureRedirect: '/entrar'\n  });\n  let ambientes = await todosAmbientes(true);\n  let reservas = await todasReservas(usuario.id);\n  return json({\n    usuario,\n    ambientes,\n    reservas\n  });\n}\nexport default function Reservas() {\n  _s();\n  let data = useActionData();\n  let {\n    usuario,\n    ambientes,\n    reservas\n  } = useLoaderData();\n  return <div className='container'>\n      <Nav />\n      <h1>Reservar ambiente</h1>\n      <Form method='post' action='?index'>\n        <h2>Dados morador</h2>\n        <label>Nome do Usu\u00E1rio:</label>\n        <strong>{usuario.nome}</strong>\n        <input type='hidden' name='id_morador' value={usuario.id} />\n        <br />\n\n        <label>N\u00FAmero do Apartamento:</label>\n        <strong>{usuario.apartamento}</strong>\n        <br />\n\n        <label>Bloco:</label>\n        <strong>{usuario.bloco}</strong>\n        <br />\n\n        <h2>Ambiente</h2>\n        <label htmlFor='id_espaco'>Ambiente:</label>\n        <br />\n        <br />\n        <select name='id_espaco' id='id_espaco'>\n          {ambientes.map(ambiente => <option key={ambiente.id} value={ambiente.id}>\n              {ambiente.nome}\n            </option>)}\n        </select>\n        <br />\n        <br />\n\n        <label htmlFor='data_reserva'>Data da Reserva:</label>\n        <br />\n        <br />\n        <input type='date' id='data_reserva' name='data' required />\n        <br />\n        <br />\n        <input type='hidden' name='_action' value='nova_reserva' />\n        <input type='submit' value='Reservar' />\n        {data?.mensagem && <p className='mensagem-erro'>{data.mensagem}</p>}\n      </Form>\n      <h2>Reservas Atuais:</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Ambiente</th>\n            <th>Usu\u00E1rio</th>\n            <th>Apartamento</th>\n            <th>Bloco</th>\n            <th>Data</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {reservas.length == 0 && <tr>\n              <td colSpan={5}>Nenhuma reserva encontrada.</td>\n            </tr>}\n          {reservas.map(reserva => <tr key={reserva.id}>\n              <td>{reserva.Ambiente.nome}</td>\n              <td>{usuario.nome}</td>\n              <td>{usuario.apartamento}</td>\n              <td>{usuario.bloco}</td>\n              <td>{reserva.data}</td>\n              <td>\n                <Form method='post'>\n                  <input type='hidden' name='_action' value='cancelar_reserva' />\n                  <input type='hidden' name='id_reserva' value={reserva.id} />\n                  <button>Cancelar</button>\n                </Form>\n              </td>\n            </tr>)}\n        </tbody>\n      </table>\n    </div>;\n}\n_s(Reservas, \"rd5XIv9Xq2UjfVWe6YvhKUEhFRM=\", false, function () {\n  return [useActionData, useLoaderData];\n});\n_c = Reservas;\nvar _c;\n$RefreshReg$(_c, \"Reservas\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
